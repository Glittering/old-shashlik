cmake_minimum_required(VERSION 2.8)


# General definitions
set(SHASHLIK_VERSION_STRING "0.5.0")
set(SHASHLIK_VERSION_MAJOR 0)
set(SHASHLIK_VERSION_MINOR 5)
set(SHASHLIK_VERSION_RELEASE 0)
set(SHASHLIK_VERSION_YEAR 2014)

# ----------------------------------------------------------------
# Requirements


find_package(ECM 1.0.0 REQUIRED NO_MODULE)
set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH} ${ECM_KDE_MODULE_DIR} ${CMAKE_SOURCE_DIR}/cmake)


# For Qt5 and KF5 stuff, you must set the CMake module path first. See
# BUILDING for how to do that.

find_package(Qt5 ${REQUIRED_QT_VERSION} CONFIG REQUIRED Core)

set(KF5_VERSION "5.0.0") # handled by release scripts
set(KF5_DEP_VERSION "5.0.0") # handled by release scripts

# CMake include files. Paths are generated by the find_package calls above(?)
include(FeatureSummary)
include(GenerateExportHeader)
include(ECMGenerateHeaders)
include(KDEInstallDirs)
include(KDECMakeSettings)
include(ECMPackageConfigHelpers)
include(ECMSetupVersion)

find_package(FFI REQUIRED)


find_package(Java 1.6 REQUIRED)
include(UseJava)

if(${Java_VERSION} VERSION_LESS "1.6")
    message(FATAL_ERROR "Your Java SDK is ${Java_VERSION}, which is too low. Shashlik is based on KitKat, which explicitly requires Java 6 to compile successfully.")
elseif(${Java_VERSION} VERSION_EQUAL "1.7" OR ${Java_VERSION} VERSION_GREATER "1.7")
    message(FATAL_ERROR "Your Java SDK is ${Java_VERSION}, which is too high. Shashlik is based on KitKat, which explicitly requires Java 6 to compile successfully.")
endif()

# ----------------------------------------------------------------
# System settings

# It is necessary to note that we have endian.h, which we do on all systems we
# target otherwise the android code goes and redefines it all on us. Not so
# great...
add_definitions(-DHAVE_SYS_UIO_H
                -DHAVE_ENDIAN_H
                -DHAVE_OFF64_T   # FIXME: Need to investigate which gcc flags is needed to get this
                -DHAVE_SYS_SOCKET_H
                -DHAVE_PTHREADS
                -DHAVE_POSIX_CLOCKS
)

# Standard system libraries that everything links against
set(STANDARD_SYS_LIBS  dl pthread z resolv ffi)



# ----------------------------------------------------------------
# Various project settings

# This will force a 32bit build (read in various places and sets compiler/linker flags on binaries)
set(FORCE_32BIT_BUILD false)

# Set JIT_VM to:
#   false   if you want to run an interpreter (currently necessary on 64 bit systems)
#   true    if you want just in time compilation to assembler
#
# false is the default
#
# FIXME: Should we perhaps have a test for 32/64 bit systems?
set(JIT_VM false)

# It is assumed that the various repos are checked out next to this one
# This is described in the file BUILDING.
set(GENERAL_SOURCE_PATH ${CMAKE_SOURCE_DIR}/..)

set(ANDROID_CORE_PATH              ${GENERAL_SOURCE_PATH}/android-core)
set(ANDROID_LIBCORE_PATH           ${GENERAL_SOURCE_PATH}/android-libcore)
set(ANDROID_FRAMEWORKS_NATIVE_PATH ${GENERAL_SOURCE_PATH}/android-frameworks-native)
set(DALVIK_PATH                    ${GENERAL_SOURCE_PATH}/dalvik)
set(NATIVEHELPER_PATH              ${GENERAL_SOURCE_PATH}/libnativehelper)
set(SAFE_IOP_PATH                  ${GENERAL_SOURCE_PATH}/safe-iop)


# Tier 1 libraries

# android-core (FIXME: Make one ANDROID_CORE_INCLUDES instead?)
set(LIBCORKSCREW_INCLUDES  ${ANDROID_CORE_PATH}/include)
set(LIBLOG_INCLUDES        ${ANDROID_CORE_PATH}/include)
set(LIBUTILS_INCLUDES      ${ANDROID_CORE_PATH}/include)
set(LIBCUTILS_INCLUDES     ${ANDROID_CORE_PATH}/include)

set(LIBANDROIDCORE_INCLUDEDIRS ${ANDROID_CORE_PATH}/include)
set(LIBANDROIDLIBCORE_INCLUDEDIRS ${ANDROID_LIBCORE_PATH}/include)

# nativehelper
set(LIBNATIVEHELPER_INCLUDES ${NATIVEHELPER_PATH}/include/nativehelper)
set(LIBNATIVEHELPER_INCLUDEDIRS ${NATIVEHELPER_PATH}/include/nativehelper ${NATIVEHELPER_PATH}/include)

# safe-iop
set(SAFE_IOP_INCLUDES ${SAFE_IOP_PATH}/include)

# Tier2 libraries

# Dalvik
set(LIBDEX_INCLUDES ${DALVIK_PATH})

# frameworks/native
set(LIBBINDER_INCLUDES ${CMAKE_SOURCE_DIR}/src/libs/libbinder
                       ${ANDROID_FRAMEWORKS_NATIVE_PATH}/include
                       ${CMAKE_INSTALL_PREFIX}/include    # FIXME: Remove when the build works without tier1/2
                       #${LIBXXX_INCLUDS}/include
)

# ----------------------------------------------------------------


add_subdirectory(src)
